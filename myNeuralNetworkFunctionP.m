function [Y,Xf,Af] = myNeuralNetworkFunctionP(X,~,~)
%MYNEURALNETWORKFUNCTION neural network simulation function.
%
% Auto-generated by MATLAB, 08-Sep-2023 02:54:59.
%
% [Y] = myNeuralNetworkFunction(X,~,~) takes these arguments:
%
%   X = 1xTS cell, 1 inputs over TS timesteps
%   Each X{1,ts} = Qx6 matrix, input #1 at timestep ts.
%
% and returns:
%   Y = 1xTS cell of 1 outputs over TS timesteps.
%   Each Y{1,ts} = Qx2 matrix, output #1 at timestep ts.
%
% where Q is number of samples (or series) and TS is the number of timesteps.

%#ok<*RPMT0>

% ===== NEURAL NETWORK CONSTANTS =====

% Input 1
x1_step1.xoffset = [9.87792268371849;79.2331054140722;11.3679848881848;0.0112489584604173;0.000379082439473026;-0.119240360307761];
x1_step1.gain = [0.208421527478348;0.103554896996933;0.0709824782928914;7.45504259679016;1559.58485836542;7.95309223862289];
x1_step1.ymin = -1;

% Layer 1
b1 = [-1.4689400462613166898;-1.0171331485240866499;-0.57606146024520799021;-0.24846920683626458337;0.21369284725284429238;1.5806979905623907978;-2.0965421644834423276];
IW1_1 = [2.097661152161772069 1.7809223029925651538 -0.75342651159465767741 -0.070994182237167607896 -0.32276662351844964682 0.39374761823220266743;-1.309483031105001416 1.4898517112705498278 0.33678632318401491297 -1.4035386983499038571 -1.5695880795069672153 -0.40617632702805511746;0.7057485941280634556 0.2357559866472116461 0.76227363178372953278 1.2348557325602382839 -0.59735355025731928791 -1.0748412309986767887;0.53452663950477685706 0.036823552211763643793 -1.8718853082613682304 0.12948733330520870166 0.43660572633494404426 -1.0116570099620385559;3.1754309408391958591 -0.47268620406546274504 -1.7742419114957839188 -0.28259003819144301595 1.4306758741602363383 -0.61603291483013467023;-0.068688973515109483237 -0.86789199053639820569 -0.93703886025309846008 0.9247507344452315925 -0.89868709956097114766 -0.096009647712655035723;-0.49368014950697530763 -0.52904938115438615576 -0.76538369106052062119 1.5547707181865177972 0.26078599150188902511 0.038343834856459334259];

% Layer 2
b2 = [-0.57567657840355979104;0.80159224259048278416];
LW2_1 = [-2.6210558806347727945 2.0673605952191618229 0.45749667206658012342 -1.0935643924543123617 -4.6897490153819649805 -0.044778196942990289298 0.44213757391463370805;1.3170519442094452689 -2.4068907945566189177 0.86087333259907639071 1.2278324621062906008 4.0820138312832439098 1.0645667129941480678 -0.93667713888868919803];

% ===== SIMULATION ========

% Format Input Arguments
isCellX = iscell(X);
if ~isCellX
    X = {X};
end

% Dimensions
TS = size(X,2); % timesteps
if ~isempty(X)
    Q = size(X{1},1); % samples/series
else
    Q = 0;
end

% Allocate Outputs
Y = cell(1,TS);

% Time loop
for ts=1:TS
    
    % Input 1
    X{1,ts} = X{1,ts}';
    Xp1 = mapminmax_apply(X{1,ts},x1_step1);
    
    % Layer 1
    a1 = tansig_apply(repmat(b1,1,Q) + IW1_1*Xp1);
    
    % Layer 2
    a2 = softmax_apply(repmat(b2,1,Q) + LW2_1*a1);
    
    % Output 1
    Y{1,ts} = a2;
    Y{1,ts} = Y{1,ts}';
end

% Final Delay States
Xf = cell(1,0);
Af = cell(2,0);

% Format Output Arguments
if ~isCellX
    Y = cell2mat(Y);
end
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings)
y = bsxfun(@minus,x,settings.xoffset);
y = bsxfun(@times,y,settings.gain);
y = bsxfun(@plus,y,settings.ymin);
end

% Competitive Soft Transfer Function
function a = softmax_apply(n,~)
if isa(n,'gpuArray')
    a = iSoftmaxApplyGPU(n);
else
    a = iSoftmaxApplyCPU(n);
end
end
function a = iSoftmaxApplyCPU(n)
nmax = max(n,[],1);
n = bsxfun(@minus,n,nmax);
numerator = exp(n);
denominator = sum(numerator,1);
denominator(denominator == 0) = 1;
a = bsxfun(@rdivide,numerator,denominator);
end
function a = iSoftmaxApplyGPU(n)
nmax = max(n,[],1);
numerator = arrayfun(@iSoftmaxApplyGPUHelper1,n,nmax);
denominator = sum(numerator,1);
a = arrayfun(@iSoftmaxApplyGPUHelper2,numerator,denominator);
end
function numerator = iSoftmaxApplyGPUHelper1(n,nmax)
numerator = exp(n - nmax);
end
function a = iSoftmaxApplyGPUHelper2(numerator,denominator)
if (denominator == 0)
    a = numerator;
else
    a = numerator ./ denominator;
end
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n,~)
a = 2 ./ (1 + exp(-2*n)) - 1;
end
